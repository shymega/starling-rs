/*
 * Starling Bank API
 *
 * OpenAPI specification for the Starling Bank Public API.  For more information visit: https://developer.starlingbank.com/docs
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

/// IdentityDocumentActions : ID Document status

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct IdentityDocumentActions {
    /// Document onboarding status
    #[serde(
        rename = "documentStatus",
        skip_serializing_if = "Option::is_none"
    )]
    pub document_status: Option<DocumentStatus>,
    /// Dynamically generated list of acceptable ID documents for the user
    #[serde(
        rename = "acceptableDocumentTypes",
        skip_serializing_if = "Option::is_none"
    )]
    pub acceptable_document_types: Option<Vec<AcceptableDocumentTypes>>,
    /// The reasons a document was rejected
    #[serde(
        rename = "rejectionReasons",
        skip_serializing_if = "Option::is_none"
    )]
    pub rejection_reasons: Option<Vec<RejectionReasons>>,
}

impl IdentityDocumentActions {
    /// ID Document status
    pub fn new() -> IdentityDocumentActions {
        IdentityDocumentActions {
            document_status: None,
            acceptable_document_types: None,
            rejection_reasons: None,
        }
    }
}

/// Document onboarding status
#[derive(
    Clone,
    Copy,
    Debug,
    Eq,
    PartialEq,
    Ord,
    PartialOrd,
    Hash,
    Serialize,
    Deserialize,
)]
pub enum DocumentStatus {
    #[serde(rename = "AWAITING_UPLOAD")]
    AWAITINGUPLOAD,
    #[serde(rename = "READY_FOR_REVIEW")]
    READYFORREVIEW,
    #[serde(rename = "NOT_REQUIRED")]
    NOTREQUIRED,
}

impl Default for DocumentStatus {
    fn default() -> DocumentStatus {
        Self::AWAITINGUPLOAD
    }
}
/// Dynamically generated list of acceptable ID documents for the user
#[derive(
    Clone,
    Copy,
    Debug,
    Eq,
    PartialEq,
    Ord,
    PartialOrd,
    Hash,
    Serialize,
    Deserialize,
)]
pub enum AcceptableDocumentTypes {
    #[serde(rename = "PASSPORT")]
    PASSPORT,
    #[serde(rename = "FULL_DRIVING_LICENSE")]
    FULLDRIVINGLICENSE,
    #[serde(rename = "PROVISIONAL_DRIVING_LICENSE")]
    PROVISIONALDRIVINGLICENSE,
    #[serde(rename = "RESIDENCE_PERMIT")]
    RESIDENCEPERMIT,
    #[serde(rename = "IDENTITY_CARD")]
    IDENTITYCARD,
}

impl Default for AcceptableDocumentTypes {
    fn default() -> AcceptableDocumentTypes {
        Self::PASSPORT
    }
}
/// The reasons a document was rejected
#[derive(
    Clone,
    Copy,
    Debug,
    Eq,
    PartialEq,
    Ord,
    PartialOrd,
    Hash,
    Serialize,
    Deserialize,
)]
pub enum RejectionReasons {
    #[serde(rename = "NOT_ACCEPTABLE_DOC_TYPE")]
    NOTACCEPTABLEDOCTYPE,
    #[serde(rename = "DOC_OUT_OF_DATE")]
    DOCOUTOFDATE,
    #[serde(rename = "SOME_INFORMATION_ILLEGIBLE")]
    SOMEINFORMATIONILLEGIBLE,
    #[serde(rename = "PHOTO_BLURRY")]
    PHOTOBLURRY,
    #[serde(rename = "PHOTO_TOO_DARK")]
    PHOTOTOODARK,
    #[serde(rename = "PHOTO_CROPPED")]
    PHOTOCROPPED,
    #[serde(rename = "PHOTO_PARTIALLY_COVERED")]
    PHOTOPARTIALLYCOVERED,
    #[serde(rename = "PHOTO_REFLECTION")]
    PHOTOREFLECTION,
    #[serde(rename = "PHOTO_NO_FACE")]
    PHOTONOFACE,
    #[serde(rename = "DOB_NOT_VISIBLE")]
    DOBNOTVISIBLE,
    #[serde(rename = "DOCUMENT_DAMAGED")]
    DOCUMENTDAMAGED,
    #[serde(rename = "CANNOT_VALIDATE")]
    CANNOTVALIDATE,
    #[serde(rename = "MUST_BE_ORIGINAL")]
    MUSTBEORIGINAL,
    #[serde(rename = "ADDRESS_MISMATCH")]
    ADDRESSMISMATCH,
    #[serde(rename = "PARTIAL_OR_MISSING_ADDRESS")]
    PARTIALORMISSINGADDRESS,
    #[serde(rename = "NAME_MISMATCH")]
    NAMEMISMATCH,
    #[serde(rename = "NEEDS_FULL_DOC")]
    NEEDSFULLDOC,
    #[serde(rename = "NEEDS_RESIDENCE_PERMIT")]
    NEEDSRESIDENCEPERMIT,
    #[serde(rename = "NEEDS_PASSPORT")]
    NEEDSPASSPORT,
    #[serde(rename = "UNKNOWN")]
    UNKNOWN,
}

impl Default for RejectionReasons {
    fn default() -> RejectionReasons {
        Self::NOTACCEPTABLEDOCTYPE
    }
}
