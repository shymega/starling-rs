/*
 * Starling Bank API
 *
 * OpenAPI specification for the Starling Bank Public API.  For more information visit: https://developer.starlingbank.com/docs
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

/// RecurrenceRule : How often is the payment made

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RecurrenceRule {
    #[serde(rename = "startDate")]
    pub start_date: String,
    #[serde(rename = "frequency")]
    pub frequency: Frequency,
    #[serde(
        rename = "interval",
        skip_serializing_if = "Option::is_none"
    )]
    pub interval: Option<i32>,
    #[serde(rename = "count", skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(
        rename = "untilDate",
        skip_serializing_if = "Option::is_none"
    )]
    pub until_date: Option<String>,
    #[serde(
        rename = "weekStart",
        skip_serializing_if = "Option::is_none"
    )]
    pub week_start: Option<WeekStart>,
    #[serde(rename = "days", skip_serializing_if = "Option::is_none")]
    pub days: Option<std::collections::HashSet<Days>>,
    #[serde(
        rename = "monthDay",
        skip_serializing_if = "Option::is_none"
    )]
    pub month_day: Option<i32>,
    #[serde(
        rename = "monthWeek",
        skip_serializing_if = "Option::is_none"
    )]
    pub month_week: Option<i32>,
}

impl RecurrenceRule {
    /// How often is the payment made
    pub fn new(
        start_date: String,
        frequency: Frequency,
    ) -> RecurrenceRule {
        RecurrenceRule {
            start_date,
            frequency,
            interval: None,
            count: None,
            until_date: None,
            week_start: None,
            days: None,
            month_day: None,
            month_week: None,
        }
    }
}

///
#[derive(
    Clone,
    Copy,
    Debug,
    Eq,
    PartialEq,
    Ord,
    PartialOrd,
    Hash,
    Serialize,
    Deserialize,
)]
pub enum Frequency {
    #[serde(rename = "SECONDLY")]
    SECONDLY,
    #[serde(rename = "MINUTELY")]
    MINUTELY,
    #[serde(rename = "HOURLY")]
    HOURLY,
    #[serde(rename = "DAILY")]
    DAILY,
    #[serde(rename = "WEEKLY")]
    WEEKLY,
    #[serde(rename = "MONTHLY")]
    MONTHLY,
    #[serde(rename = "YEARLY")]
    YEARLY,
    #[serde(rename = "MILLENNIALY")]
    MILLENNIALY,
    #[serde(rename = "WORKING_DAILY")]
    WORKINGDAILY,
    #[serde(rename = "SCOTTISH_QUARTERLY")]
    SCOTTISHQUARTERLY,
    #[serde(rename = "ENGLISH_QUARTERLY")]
    ENGLISHQUARTERLY,
    #[serde(rename = "RECEIVED_QUARTERLY")]
    RECEIVEDQUARTERLY,
}

impl Default for Frequency {
    fn default() -> Frequency {
        Self::SECONDLY
    }
}
///
#[derive(
    Clone,
    Copy,
    Debug,
    Eq,
    PartialEq,
    Ord,
    PartialOrd,
    Hash,
    Serialize,
    Deserialize,
)]
pub enum WeekStart {
    #[serde(rename = "MONDAY")]
    MONDAY,
    #[serde(rename = "TUESDAY")]
    TUESDAY,
    #[serde(rename = "WEDNESDAY")]
    WEDNESDAY,
    #[serde(rename = "THURSDAY")]
    THURSDAY,
    #[serde(rename = "FRIDAY")]
    FRIDAY,
    #[serde(rename = "SATURDAY")]
    SATURDAY,
    #[serde(rename = "SUNDAY")]
    SUNDAY,
}

impl Default for WeekStart {
    fn default() -> WeekStart {
        Self::MONDAY
    }
}
///
#[derive(
    Clone,
    Copy,
    Debug,
    Eq,
    PartialEq,
    Ord,
    PartialOrd,
    Hash,
    Serialize,
    Deserialize,
)]
pub enum Days {
    #[serde(rename = "MONDAY")]
    MONDAY,
    #[serde(rename = "TUESDAY")]
    TUESDAY,
    #[serde(rename = "WEDNESDAY")]
    WEDNESDAY,
    #[serde(rename = "THURSDAY")]
    THURSDAY,
    #[serde(rename = "FRIDAY")]
    FRIDAY,
    #[serde(rename = "SATURDAY")]
    SATURDAY,
    #[serde(rename = "SUNDAY")]
    SUNDAY,
}

impl Default for Days {
    fn default() -> Days {
        Self::MONDAY
    }
}
