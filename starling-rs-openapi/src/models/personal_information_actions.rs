/*
 * Starling Bank API
 *
 * OpenAPI specification for the Starling Bank Public API.  For more information visit: https://developer.starlingbank.com/docs
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

/// PersonalInformationActions : Personal information status

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PersonalInformationActions {
    /// First name onboarding status
    #[serde(
        rename = "firstNameStatus",
        skip_serializing_if = "Option::is_none"
    )]
    pub first_name_status: Option<FirstNameStatus>,
    /// Last name onboarding status
    #[serde(
        rename = "lastNameStatus",
        skip_serializing_if = "Option::is_none"
    )]
    pub last_name_status: Option<LastNameStatus>,
    /// Date of birth onboarding status
    #[serde(
        rename = "dateOfBirthStatus",
        skip_serializing_if = "Option::is_none"
    )]
    pub date_of_birth_status: Option<DateOfBirthStatus>,
    #[serde(
        rename = "nameChangedocumentStatus",
        skip_serializing_if = "Option::is_none"
    )]
    pub name_changedocument_status: Option<NameChangedocumentStatus>,
    /// The reasons a proof of name change document was rejected
    #[serde(
        rename = "documentRejectionReasons",
        skip_serializing_if = "Option::is_none"
    )]
    pub document_rejection_reasons:
        Option<Vec<DocumentRejectionReasons>>,
    /// Dynamically generated list of name change documents for the user
    #[serde(
        rename = "acceptableDocumentTypes",
        skip_serializing_if = "Option::is_none"
    )]
    pub acceptable_document_types: Option<Vec<AcceptableDocumentTypes>>,
    /// Proof of name change document onboarding status
    #[serde(
        rename = "nameChangeDocumentStatus",
        skip_serializing_if = "Option::is_none"
    )]
    pub name_change_document_status: Option<NameChangeDocumentStatus>,
}

impl PersonalInformationActions {
    /// Personal information status
    pub fn new() -> PersonalInformationActions {
        PersonalInformationActions {
            first_name_status: None,
            last_name_status: None,
            date_of_birth_status: None,
            name_changedocument_status: None,
            document_rejection_reasons: None,
            acceptable_document_types: None,
            name_change_document_status: None,
        }
    }
}

/// First name onboarding status
#[derive(
    Clone,
    Copy,
    Debug,
    Eq,
    PartialEq,
    Ord,
    PartialOrd,
    Hash,
    Serialize,
    Deserialize,
)]
pub enum FirstNameStatus {
    #[serde(rename = "AWAITING_UPLOAD")]
    AWAITINGUPLOAD,
    #[serde(rename = "READY_FOR_REVIEW")]
    READYFORREVIEW,
    #[serde(rename = "NOT_REQUIRED")]
    NOTREQUIRED,
}

impl Default for FirstNameStatus {
    fn default() -> FirstNameStatus {
        Self::AWAITINGUPLOAD
    }
}
/// Last name onboarding status
#[derive(
    Clone,
    Copy,
    Debug,
    Eq,
    PartialEq,
    Ord,
    PartialOrd,
    Hash,
    Serialize,
    Deserialize,
)]
pub enum LastNameStatus {
    #[serde(rename = "AWAITING_UPLOAD")]
    AWAITINGUPLOAD,
    #[serde(rename = "READY_FOR_REVIEW")]
    READYFORREVIEW,
    #[serde(rename = "NOT_REQUIRED")]
    NOTREQUIRED,
}

impl Default for LastNameStatus {
    fn default() -> LastNameStatus {
        Self::AWAITINGUPLOAD
    }
}
/// Date of birth onboarding status
#[derive(
    Clone,
    Copy,
    Debug,
    Eq,
    PartialEq,
    Ord,
    PartialOrd,
    Hash,
    Serialize,
    Deserialize,
)]
pub enum DateOfBirthStatus {
    #[serde(rename = "AWAITING_UPLOAD")]
    AWAITINGUPLOAD,
    #[serde(rename = "READY_FOR_REVIEW")]
    READYFORREVIEW,
    #[serde(rename = "NOT_REQUIRED")]
    NOTREQUIRED,
}

impl Default for DateOfBirthStatus {
    fn default() -> DateOfBirthStatus {
        Self::AWAITINGUPLOAD
    }
}
///
#[derive(
    Clone,
    Copy,
    Debug,
    Eq,
    PartialEq,
    Ord,
    PartialOrd,
    Hash,
    Serialize,
    Deserialize,
)]
pub enum NameChangedocumentStatus {
    #[serde(rename = "AWAITING_UPLOAD")]
    AWAITINGUPLOAD,
    #[serde(rename = "READY_FOR_REVIEW")]
    READYFORREVIEW,
    #[serde(rename = "NOT_REQUIRED")]
    NOTREQUIRED,
}

impl Default for NameChangedocumentStatus {
    fn default() -> NameChangedocumentStatus {
        Self::AWAITINGUPLOAD
    }
}
/// The reasons a proof of name change document was rejected
#[derive(
    Clone,
    Copy,
    Debug,
    Eq,
    PartialEq,
    Ord,
    PartialOrd,
    Hash,
    Serialize,
    Deserialize,
)]
pub enum DocumentRejectionReasons {
    #[serde(rename = "NOT_ACCEPTABLE_DOC_TYPE")]
    NOTACCEPTABLEDOCTYPE,
    #[serde(rename = "DOC_OUT_OF_DATE")]
    DOCOUTOFDATE,
    #[serde(rename = "SOME_INFORMATION_ILLEGIBLE")]
    SOMEINFORMATIONILLEGIBLE,
    #[serde(rename = "PHOTO_BLURRY")]
    PHOTOBLURRY,
    #[serde(rename = "PHOTO_TOO_DARK")]
    PHOTOTOODARK,
    #[serde(rename = "PHOTO_CROPPED")]
    PHOTOCROPPED,
    #[serde(rename = "PHOTO_PARTIALLY_COVERED")]
    PHOTOPARTIALLYCOVERED,
    #[serde(rename = "PHOTO_REFLECTION")]
    PHOTOREFLECTION,
    #[serde(rename = "PHOTO_NO_FACE")]
    PHOTONOFACE,
    #[serde(rename = "DOB_NOT_VISIBLE")]
    DOBNOTVISIBLE,
    #[serde(rename = "DOCUMENT_DAMAGED")]
    DOCUMENTDAMAGED,
    #[serde(rename = "CANNOT_VALIDATE")]
    CANNOTVALIDATE,
    #[serde(rename = "MUST_BE_ORIGINAL")]
    MUSTBEORIGINAL,
    #[serde(rename = "ADDRESS_MISMATCH")]
    ADDRESSMISMATCH,
    #[serde(rename = "PARTIAL_OR_MISSING_ADDRESS")]
    PARTIALORMISSINGADDRESS,
    #[serde(rename = "NAME_MISMATCH")]
    NAMEMISMATCH,
    #[serde(rename = "NEEDS_FULL_DOC")]
    NEEDSFULLDOC,
    #[serde(rename = "NEEDS_RESIDENCE_PERMIT")]
    NEEDSRESIDENCEPERMIT,
    #[serde(rename = "NEEDS_PASSPORT")]
    NEEDSPASSPORT,
    #[serde(rename = "UNKNOWN")]
    UNKNOWN,
}

impl Default for DocumentRejectionReasons {
    fn default() -> DocumentRejectionReasons {
        Self::NOTACCEPTABLEDOCTYPE
    }
}
/// Dynamically generated list of name change documents for the user
#[derive(
    Clone,
    Copy,
    Debug,
    Eq,
    PartialEq,
    Ord,
    PartialOrd,
    Hash,
    Serialize,
    Deserialize,
)]
pub enum AcceptableDocumentTypes {
    #[serde(rename = "PASSPORT")]
    PASSPORT,
    #[serde(rename = "PROVISIONAL_DRIVING_LICENSE")]
    PROVISIONALDRIVINGLICENSE,
    #[serde(rename = "FULL_DRIVING_LICENSE")]
    FULLDRIVINGLICENSE,
    #[serde(rename = "RESIDENCE_PERMIT")]
    RESIDENCEPERMIT,
    #[serde(rename = "IDENTITY_CARD")]
    IDENTITYCARD,
    #[serde(rename = "MARRIAGE_CERTIFICATE")]
    MARRIAGECERTIFICATE,
    #[serde(rename = "DEED_POLL")]
    DEEDPOLL,
    #[serde(rename = "DIVORCE_CERTIFICATE")]
    DIVORCECERTIFICATE,
}

impl Default for AcceptableDocumentTypes {
    fn default() -> AcceptableDocumentTypes {
        Self::PASSPORT
    }
}
/// Proof of name change document onboarding status
#[derive(
    Clone,
    Copy,
    Debug,
    Eq,
    PartialEq,
    Ord,
    PartialOrd,
    Hash,
    Serialize,
    Deserialize,
)]
pub enum NameChangeDocumentStatus {
    #[serde(rename = "AWAITING_UPLOAD")]
    AWAITINGUPLOAD,
    #[serde(rename = "READY_FOR_REVIEW")]
    READYFORREVIEW,
    #[serde(rename = "NOT_REQUIRED")]
    NOTREQUIRED,
}

impl Default for NameChangeDocumentStatus {
    fn default() -> NameChangeDocumentStatus {
        Self::AWAITINGUPLOAD
    }
}
