/*
 * Starling Bank API
 *
 * OpenAPI specification for the Starling Bank Public API.  For more information visit: https://developer.starlingbank.com/docs
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

/// IdentityModelDocumentDecision : Response representing the status of the identity document checks, with any failed quality checks

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct IdentityModelDocumentDecision {
    /// Outcome of the machine learning document check
    #[serde(
        rename = "decision",
        skip_serializing_if = "Option::is_none"
    )]
    pub decision: Option<Decision>,
    /// List of quality checks that have failed for the given document
    #[serde(
        rename = "failedChecks",
        skip_serializing_if = "Option::is_none"
    )]
    pub failed_checks: Option<Vec<FailedChecks>>,
}

impl IdentityModelDocumentDecision {
    /// Response representing the status of the identity document checks, with any failed quality checks
    pub fn new() -> IdentityModelDocumentDecision {
        IdentityModelDocumentDecision {
            decision: None,
            failed_checks: None,
        }
    }
}

/// Outcome of the machine learning document check
#[derive(
    Clone,
    Copy,
    Debug,
    Eq,
    PartialEq,
    Ord,
    PartialOrd,
    Hash,
    Serialize,
    Deserialize,
)]
pub enum Decision {
    #[serde(rename = "PASS")]
    PASS,
    #[serde(rename = "FAIL")]
    FAIL,
}

impl Default for Decision {
    fn default() -> Decision {
        Self::PASS
    }
}
/// List of quality checks that have failed for the given document
#[derive(
    Clone,
    Copy,
    Debug,
    Eq,
    PartialEq,
    Ord,
    PartialOrd,
    Hash,
    Serialize,
    Deserialize,
)]
pub enum FailedChecks {
    #[serde(rename = "NOT_ACCEPTABLE_DOC_TYPE")]
    NOTACCEPTABLEDOCTYPE,
    #[serde(rename = "PHOTO_BLURRY")]
    PHOTOBLURRY,
    #[serde(rename = "PHOTO_TOO_DARK")]
    PHOTOTOODARK,
    #[serde(rename = "PHOTO_CROPPED")]
    PHOTOCROPPED,
    #[serde(rename = "PHOTO_REFLECTION")]
    PHOTOREFLECTION,
    #[serde(rename = "PHOTO_NO_FACE")]
    PHOTONOFACE,
    #[serde(rename = "UNKNOWN")]
    UNKNOWN,
}

impl Default for FailedChecks {
    fn default() -> FailedChecks {
        Self::NOTACCEPTABLEDOCTYPE
    }
}
