/*
 * Starling Bank API
 *
 * OpenAPI specification for the Starling Bank Public API.  For more information visit: https://developer.starlingbank.com/docs
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

/// Card : Information about card

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Card {
    #[serde(rename = "cardUid")]
    pub card_uid: String,
    #[serde(rename = "publicToken")]
    pub public_token: String,
    #[serde(rename = "enabled")]
    pub enabled: bool,
    #[serde(rename = "walletNotificationEnabled")]
    pub wallet_notification_enabled: bool,
    #[serde(rename = "posEnabled")]
    pub pos_enabled: bool,
    #[serde(rename = "atmEnabled")]
    pub atm_enabled: bool,
    #[serde(rename = "onlineEnabled")]
    pub online_enabled: bool,
    #[serde(rename = "mobileWalletEnabled")]
    pub mobile_wallet_enabled: bool,
    #[serde(rename = "gamblingEnabled")]
    pub gambling_enabled: bool,
    #[serde(rename = "magStripeEnabled")]
    pub mag_stripe_enabled: bool,
    #[serde(rename = "cancelled")]
    pub cancelled: bool,
    #[serde(rename = "activationRequested")]
    pub activation_requested: bool,
    #[serde(rename = "activated")]
    pub activated: bool,
    #[serde(rename = "endOfCardNumber")]
    pub end_of_card_number: String,
    #[serde(rename = "currencyFlags")]
    pub currency_flags: Vec<crate::models::CurrencyFlag>,
    #[serde(rename = "cardAssociationUid")]
    pub card_association_uid: String,
    #[serde(
        rename = "gamblingToBeEnabledAt",
        skip_serializing_if = "Option::is_none"
    )]
    pub gambling_to_be_enabled_at: Option<String>,
}

impl Card {
    /// Information about card
    pub fn new(
        card_uid: String,
        public_token: String,
        enabled: bool,
        wallet_notification_enabled: bool,
        pos_enabled: bool,
        atm_enabled: bool,
        online_enabled: bool,
        mobile_wallet_enabled: bool,
        gambling_enabled: bool,
        mag_stripe_enabled: bool,
        cancelled: bool,
        activation_requested: bool,
        activated: bool,
        end_of_card_number: String,
        currency_flags: Vec<crate::models::CurrencyFlag>,
        card_association_uid: String,
    ) -> Card {
        Card {
            card_uid,
            public_token,
            enabled,
            wallet_notification_enabled,
            pos_enabled,
            atm_enabled,
            online_enabled,
            mobile_wallet_enabled,
            gambling_enabled,
            mag_stripe_enabled,
            cancelled,
            activation_requested,
            activated,
            end_of_card_number,
            currency_flags,
            card_association_uid,
            gambling_to_be_enabled_at: None,
        }
    }
}
