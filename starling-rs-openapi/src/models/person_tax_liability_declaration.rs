/*
 * Starling Bank API
 *
 * OpenAPI specification for the Starling Bank Public API.  For more information visit: https://developer.starlingbank.com/docs
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

/// PersonTaxLiabilityDeclaration : The tax liability declaration, and any countries to which it may apply if a liability exists

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PersonTaxLiabilityDeclaration {
    /// Has the user confirmed they have a tax liability to declare
    #[serde(rename = "taxLiabilityDeclarationAnswer")]
    pub tax_liability_declaration_answer: TaxLiabilityDeclarationAnswer,
    /// Liability declaration details
    #[serde(rename = "countryDeclarations")]
    pub country_declarations:
        Vec<crate::models::PersonTaxLiabilityDeclarationEntry>,
}

impl PersonTaxLiabilityDeclaration {
    /// The tax liability declaration, and any countries to which it may apply if a liability exists
    pub fn new(
        tax_liability_declaration_answer: TaxLiabilityDeclarationAnswer,
        country_declarations: Vec<
            crate::models::PersonTaxLiabilityDeclarationEntry,
        >,
    ) -> PersonTaxLiabilityDeclaration {
        PersonTaxLiabilityDeclaration {
            tax_liability_declaration_answer,
            country_declarations,
        }
    }
}

/// Has the user confirmed they have a tax liability to declare
#[derive(
    Clone,
    Copy,
    Debug,
    Eq,
    PartialEq,
    Ord,
    PartialOrd,
    Hash,
    Serialize,
    Deserialize,
)]
pub enum TaxLiabilityDeclarationAnswer {
    #[serde(rename = "YES")]
    YES,
    #[serde(rename = "NO")]
    NO,
}

impl Default for TaxLiabilityDeclarationAnswer {
    fn default() -> TaxLiabilityDeclarationAnswer {
        Self::YES
    }
}
